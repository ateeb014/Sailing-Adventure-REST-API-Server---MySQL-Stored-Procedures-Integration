//Stored procedure to add values into Boats table;

DELIMITER $$
CREATE PROCEDURE SailingAdventure.AddBoat(IN name VARCHAR(45), IN p_Type VARCHAR(100), OUT msg VARCHAR(255)) 
BEGIN DECLARE boatCount INT DEFAULT 0; 
SELECT COUNT(*) INTO boatCount FROM SailingAdventure.Boats WHERE B_name = name AND Type = p_Type; 
IF boatCount = 0 THEN INSERT INTO SailingAdventure.Boats (B_name, Type) VALUES (name, p_Type);
SET msg = 'Boat added successfully.';
ELSE
SET msg = 'Boat already exists'; 
END IF;
END $$

// Stored procedure to add into sailors table; (Checks the sailor age and if sailor already exists or not)

DELIMITER $$
CREATE PROCEDURE SailingAdventure.AddSailor(IN name VARCHAR(45), IN s_B_date DATE, IN s_Rate INT, OUT msg VARCHAR(255))
BEGIN
DECLARE sailorAge INT;
DECLARE sailorCount INT DEFAULT 0;
SET sailorAge = FLOOR(datediff(curdate(), s_B_date)/365);
SELECT COUNT(*) INTO sailorCount FROM SailingAdventure.Sailors WHERE S_name = name;
IF sailorCount > 0 THEN
SET msg = 'Sailor already exists';
ELSE
IF sailorAge < 24 THEN
SET msg = 'Sailor is below allowed age.';
ELSE
INSERT INTO SailingAdventure.Sailors (S_name, B_date, Rate) VALUES (name, s_B_date, s_Rate);
SET msg = 'Sailor added.';
END IF;
END IF;
END $$

// Stored procedure to add into reserves table

DELIMITER $$
CREATE PROCEDURE SailingAdventure.AddReserves(IN sid INT, IN bid INT, IN D DATE, OUT msg VARCHAR(255))
BEGIN
DECLARE sailorRate INT;
DECLARE boatType VARCHAR(100);
SELECT Rate INTO sailorRate FROM SailingAdventure.Sailors WHERE S_id = sid;
SELECT Type INTO boatType FROM SailingAdventure.Boats WHERE B_id = bid;
IF boatType = 'Fishing Vessel' AND sailorRate <= 7 THEN
SET msg = ' Reservation cannot be done for requested boat – Sailor rate is low ';
ELSEIF boatType = 'Sailboat' AND sailorRate <= 5 THEN
SET msg = ' Reservation cannot be done for requested boat – Sailor rate is low ';
ELSEIF boatType = 'Bass boat' AND sailorRate > 2 THEN
SET msg = 'Cannot reserve a Bass boat- Sailor rate must be less than or equal to 2';
ELSE
INSERT INTO SailingAdventure.Reserves (S_id, B_id, Day) VALUES (sid, bid, D);
SET msg = 'Reservation added successfully.';
END IF;
END $$


// stored procedure to get the boat count

DELIMITER $$
CREATE PROCEDURE SailingAdventure.getBoatCount(IN b_Type VARCHAR(100), OUT boatCount INT)
BEGIN
SELECT COUNT(*) INTO boatCount FROM SailingAdventure.Boats WHERE Type=b_Type;
END $$


// stored procedure to get the boat id and name by type:

DELIMITER $$
CREATE PROCEDURE SailingAdventure.boatList(IN b_type Varchar(100))
BEGIN
SELECT B_id, B_name FROM SailingAdventure.Boats WHERE Type=b_type;
END $$

// stored procedure to get the older Sailor list:

DELIMITER $$
CREATE PROCEDURE SailingAdventure.olderSailorsList(IN Age INT)
BEGIN
SELECT S_id,S_name,B_date, Rate FROM SailingAdventure.Sailors
WHERE FLOOR(datediff(curdate(), B_date)/365) > Age;
End $$

// stored procedure to get the younger Sailor list:

DELIMITER $$
CREATE PROCEDURE SailingAdventure.youngerSailorsList(IN Age INT)
BEGIN
SELECT S_id,S_name,B_date, Rate FROM SailingAdventure.Sailors
WHERE FLOOR(datediff(curdate(), B_date)/365) < Age;
End $$

//stored procedure to get reservations before the given date
DELIMITER $$
CREATE PROCEDURE SailingAdventure.getReservationsBeforeDate(IN D DATE)
BEGIN
SELECT b.B_id, b.B_name
FROM SailingAdventure.Boats b JOIN SailingAdventure.Reserves ON b.B_id=Reserves.B_id
WHERE Reserves.Day < D;
END $$

//stored procedure to get reservations after the given date
DELIMITER $$
CREATE PROCEDURE SailingAdventure.getReservationsAfterDate(IN D DATE)
BEGIN
SELECT b.B_id, b.B_name
FROM SailingAdventure.Boats b JOIN SailingAdventure.Reserves ON b.B_id=Reserves.B_id
WHERE Reserves.Day > D;
END $$

